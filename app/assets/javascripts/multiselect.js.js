// Generated by CoffeeScript 1.7.1
var ready;

ready = function() {
  var dropright, get_selected, multiselect_deselectAll, multiselect_selectAll, multiselect_selected, multiselect_toggle;
  if ($(window).width() >= 996) {
    dropright = true;
  } else {
    dropright = false;
  }
  $('.multiselect-select').multiselect({
    maxHeight: 300,
    buttonClass: 'btn btn-default multiselect-btn',
    enableFiltering: true,
    dropRight: dropright,
    buttonText: function(options, select) {
      var type;
      type = select.data("type");
      if (options.length === 0) {
        return "Select " + type + " <b class=\"caret\"></b>";
      } else {
        return options.length + " " + type + " <b class=\"caret\"></b>";
      }
    },
    buttonTitle: function(options, select) {
      var type;
      type = select.data("type");
      if (options.length === 0) {
        return "Select " + type;
      } else {
        return options.length + " " + type + " selected";
      }
    }
  });
  $(".multiselect-select").on("change", function() {
    return get_selected();
  });
  get_selected = function() {
    var selected_html;
    selected_html = "";
    if ($(".multiselect-select option:selected").length > 0) {
      $(".multiselect-select option:selected").each(function() {
        var $this, selected_text;
        $this = void 0;
        selected_text = void 0;
        $this = $(this);
        if ($this.length) {
          selected_text = $this.text();
          return selected_html += "<li>" + selected_text + "</li>";
        }
      });
    } else {
      selected_html = "<em>Nothing selected</em>";
    }
    return $("#multiselect-values").html("<h4>Queued for MFG</h4> <ul class=\"list-unstyled\">" + selected_html + "</ul>");
  };

  /*
  Gets whether all the options are selected
   */
  multiselect_selected = function($el) {
    var ret;
    ret = true;
    $("option", $el).each(function(element) {
      if (!$(this).prop("selected")) {
        return ret = false;
      }
    });
    return ret;
  };

  /*
  Selects all the options
   */
  multiselect_selectAll = function($el) {
    return $("option", $el).each(function(element) {
      $el.multiselect("select", $(this).val());
      return get_selected();
    });
  };

  /*
  Deselects all the options
   */
  multiselect_deselectAll = function($el) {
    return $("option", $el).each(function(element) {
      $el.multiselect("deselect", $(this).val());
      return get_selected();
    });
  };

  /*
  Clears all the selected options
   */
  multiselect_toggle = function($el, $btn) {
    if (multiselect_selected($el)) {
      multiselect_deselectAll($el);
      return $btn.text("Select All");
    } else {
      multiselect_selectAll($el);
      return $btn.text("Deselect All");
    }
  };
  return $(".multiselect-select-all").click(function(e) {
    e.preventDefault();
    return multiselect_toggle($('.multiselect-select'), $(this));
  });
};

$(document).ready(ready);

$(document).on('page:load', ready);

//# sourceMappingURL=multiselect.js.map
